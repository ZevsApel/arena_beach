import { NextRequest, NextResponse } from "next/server";
import path from "path";
import { promises as fs } from "fs";
import sanitizeSVG from "@mattkrick/sanitize-svg";
import { v4 as uuidv4 } from "uuid";
import sharp from "sharp";

const MAX_FILE_SIZE = 5 * 1024 * 1024;

export async function POST(request: NextRequest) {
  try {
    console.log("üîπ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞");

    const formData = await request.formData();
    const file = formData.get("file") as File;
    const slug = formData.get("slug") as string;
    const type = formData.get("type") as "icon" | "image";

    console.log("‚û°Ô∏è formData:", {
      file: file?.name,
      size: file?.size,
      type: file?.type,
      slug,
      uploadType: type,
    });

    if (!file || !slug || !type) {
      console.error("‚ùå –ù–µ –ø–µ—Ä–µ–¥–∞–Ω —Ñ–∞–π–ª, slug –∏–ª–∏ type");
      return NextResponse.json(
        { error: "–§–∞–π–ª, —Å–∏–º–≤–æ–ª—å–Ω—ã–π –∫–æ–¥ –∏–ª–∏ —Ç–∏–ø –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã" },
        { status: 400 }
      );
    }

    if (file.size > MAX_FILE_SIZE) {
      console.error("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π:", file.size);
      return NextResponse.json(
        { error: "–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 5–º–ë)" },
        { status: 400 }
      );
    }

    const ext = path.extname(file.name).toLowerCase();
    console.log("üìÇ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞:", ext);

    if (type === "icon") {
      const allowedExt = [".png", ".svg"];
      const allowedMime = ["image/png", "image/svg+xml"];
      if (!allowedExt.includes(ext) || !allowedMime.includes(file.type)) {
        console.error("‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∫–æ–Ω–∫–∏:", {
          ext,
          mime: file.type,
        });
        return NextResponse.json(
          { error: "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∫–æ–Ω–∫–∏" },
          { status: 400 }
        );
      }
    }

    if (type === "image") {
      const allowedExt = [".jpg", ".jpeg", ".webp"];
      const allowedMime = ["image/jpeg", "image/webp"];
      if (!allowedExt.includes(ext) || !allowedMime.includes(file.type)) {
        console.error("‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", {
          ext,
          mime: file.type,
        });
        return NextResponse.json(
          { error: "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" },
          { status: 400 }
        );
      }
    }

    const subFolder = type === "icon" ? "icon" : "";
    const uploadDir = path.join(
      process.cwd(),
      "public",
      "upload",
      "rooms",
      slug,
      subFolder
    );
    console.log("üìÅ –ü–∞–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:", uploadDir);

    await fs.mkdir(uploadDir, { recursive: true });

    const safeFileName = `${uuidv4()}${ext}`;
    const filePath = path.join(uploadDir, safeFileName);
    console.log("üíæ –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞:", filePath);

    const arrayBuffer = await file.arrayBuffer();
    const buffer = Buffer.from(arrayBuffer);

    if (ext === ".svg") {
      console.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—á–∏—Å—Ç–∫–∞ SVG...");
      const clean = await sanitizeSVG(buffer);

      if (!clean) {
        console.error("‚ùå SVG –Ω–µ–±–µ–∑–æ–ø–∞—Å–µ–Ω!");
        return NextResponse.json(
          { error: "SVG —Ñ–∞–π–ª –Ω–µ –±–µ–∑–æ–ø–∞—Å–µ–Ω –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç" },
          { status: 400 }
        );
      }

      if (typeof clean === "string") {
        console.log("‚úÖ SVG —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º...");
        await fs.writeFile(filePath, clean, "utf-8");
      }
    } else {
      console.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ sharp...");
      try {
        await sharp(buffer).metadata();
      } catch (err) {
        console.error("‚ùå Sharp –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª:", err);
        return NextResponse.json(
          { error: "–§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º" },
          { status: 400 }
        );
      }

      console.log("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º...");
      await fs.writeFile(filePath, buffer);
    }

    const url = `/upload/rooms/${slug}/${subFolder ? subFolder + "/" : ""}${safeFileName}`;
    console.log("üåç –§–∞–π–ª –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —Å—Å—ã–ª–∫–µ:", url);

    return NextResponse.json({ url });
  } catch (error) {
    console.error("üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ:", error);
    return NextResponse.json(
      { error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞" },
      { status: 500 }
    );
  }
}
